#!/usr/bin/env python
# -*- coding: latin-1 -*-
import os
import json
import argparse
import codecs


def formatFile(filename, prefix_file):
    prefixDict = json.load(prefix_file)
    with codecs.open(filename, 'r', 'utf-8') as f:
        data = f.read()
        for prefix, uri in prefixDict.iteritems():
            data = data.replace(uri[1:-1], prefix+":")
        with codecs.open(filename, 'w', 'utf-8') as f:
            f.write(data)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--dataset', nargs='+', required=True,
                        type=argparse.FileType('r'),
                        help='Ontologies to process')
    parser.add_argument('-q', '--query', required=True,
                        type=argparse.FileType('r'),
                        help='Query to apply to the ontology')
    parser.add_argument('-o', '--output', required=True,
                        type=argparse.FileType('w'),
                        help='Output file')
    parser.add_argument('-f', '--format', nargs='?',
                        default='CSV',
                        help='The output format')
    parser.add_argument('-p', '--prefixes',
                        type=argparse.FileType('r'),
                        help='The json file containing prefix reference')

    args = parser.parse_args()
    os.system("arq  --query={1} --results={2} > {3}".format(
        "--data="+" --data=".join([file.name for file in args.dataset]),
        args.query.name,
        args.format,
        args.output.name
            )
        )
    if args.format.lower() == "csv" and args.prefixes is not None:
        formatFile(args.output.name, args.prefixes)
